# Getting CRAB log files, unzipping, and scraping them to search for a string

# 1. crab getlog -d crab_NanoPost_EGamma-Run2018B_UL2018_MiniAODv2_NanoAODv9
#    This will dump all the log files in the results/ directory


import os

# toUnzip = [
#     'cmsRun_25.log.tar.gz',
#     'cmsRun_60.log.tar.gz',
#     'cmsRun_38.log.tar.gz',
#     'cmsRun_11.log.tar.gz',
#     'cmsRun_63.log.tar.gz',
#     'cmsRun_13.log.tar.gz',
#     'cmsRun_39.log.tar.gz',
#     'cmsRun_29.log.tar.gz',
#     'cmsRun_64.log.tar.gz',
#     'cmsRun_31.log.tar.gz',
#     'cmsRun_15.log.tar.gz',
#     'cmsRun_9.log.tar.gz',
#     'cmsRun_23.log.tar.gz',
#     'cmsRun_14.log.tar.gz',
#     'cmsRun_20.log.tar.gz',
#     'cmsRun_5.log.tar.gz',
#     'cmsRun_53.log.tar.gz',
#     'cmsRun_37.log.tar.gz',
#     'cmsRun_7.log.tar.gz',
#     'cmsRun_43.log.tar.gz',
#     'cmsRun_42.log.tar.gz',
#     'cmsRun_22.log.tar.gz',
#     'cmsRun_44.log.tar.gz',
#     'cmsRun_26.log.tar.gz',
#     'cmsRun_41.log.tar.gz',
#     'cmsRun_35.log.tar.gz',
#     'cmsRun_33.log.tar.gz',
#     'cmsRun_32.log.tar.gz',
#     'cmsRun_18.log.tar.gz',
#     'cmsRun_50.log.tar.gz',
#     'cmsRun_49.log.tar.gz',
#     'cmsRun_19.log.tar.gz',
#     'cmsRun_16.log.tar.gz',
#     'cmsRun_67.log.tar.gz',
#     'cmsRun_58.log.tar.gz',
#     'cmsRun_57.log.tar.gz',
#     'cmsRun_8.log.tar.gz',
#     'cmsRun_71.log.tar.gz',
#     'cmsRun_52.log.tar.gz',
#     'cmsRun_54.log.tar.gz',
#     'cmsRun_45.log.tar.gz',
#     'cmsRun_30.log.tar.gz',
#     'cmsRun_12.log.tar.gz',
#     'cmsRun_17.log.tar.gz',
#     'cmsRun_10.log.tar.gz',
#     'cmsRun_21.log.tar.gz',
#     'cmsRun_6.log.tar.gz',
#     'cmsRun_47.log.tar.gz',
#     'cmsRun_2.log.tar.gz',
#     'cmsRun_51.log.tar.gz',
#     'cmsRun_24.log.tar.gz',
#     'cmsRun_68.log.tar.gz',
#     'cmsRun_46.log.tar.gz',
#     'cmsRun_72.log.tar.gz',
#     'cmsRun_40.log.tar.gz',
#     'cmsRun_4.log.tar.gz',
#     'cmsRun_48.log.tar.gz',
#     'cmsRun_55.log.tar.gz',
#     'cmsRun_36.log.tar.gz',
#     'cmsRun_28.log.tar.gz',
#     'cmsRun_66.log.tar.gz',
#     'cmsRun_59.log.tar.gz',
#     'cmsRun_61.log.tar.gz',
#     'cmsRun_34.log.tar.gz',
#     'cmsRun_27.log.tar.gz',
#     'cmsRun_69.log.tar.gz',
#     'cmsRun_1.log.tar.gz',
#     'cmsRun_62.log.tar.gz',
#     'cmsRun_70.log.tar.gz',
#     'cmsRun_65.log.tar.gz',
#     'cmsRun_56.log.tar.gz',
#     'cmsRun_3.log.tar.gz',
#     'cmsRun_74.log.tar.gz',
#     'cmsRun_73.log.tar.gz',
# ]

# for unzip in toUnzip:
#     command = "tar -xf {}".format(unzip)
#     os.system(command)

logFiles = [
    'cmsRun-stdout-73.log',
    'cmsRun-stdout-3.log',
    'cmsRun-stdout-74.log',
    'cmsRun-stdout-70.log',
    'cmsRun-stdout-62.log',
    'cmsRun-stdout-65.log',
    'cmsRun-stdout-1.log',
    'cmsRun-stdout-56.log',
    'cmsRun-stdout-27.log',
    'cmsRun-stdout-69.log',
    'cmsRun-stdout-55.log',
    'cmsRun-stdout-61.log',
    'cmsRun-stdout-34.log',
    'cmsRun-stdout-48.log',
    'cmsRun-stdout-66.log',
    'cmsRun-stdout-40.log',
    'cmsRun-stdout-72.log',
    'cmsRun-stdout-59.log',
    'cmsRun-stdout-28.log',
    'cmsRun-stdout-36.log',
    'cmsRun-stdout-4.log',
    'cmsRun-stdout-24.log',
    'cmsRun-stdout-51.log',
    'cmsRun-stdout-68.log',
    'cmsRun-stdout-47.log',
    'cmsRun-stdout-21.log',
    'cmsRun-stdout-2.log',
    'cmsRun-stdout-6.log',
    'cmsRun-stdout-30.log',
    'cmsRun-stdout-17.log',
    'cmsRun-stdout-10.log',
    'cmsRun-stdout-12.log',
    'cmsRun-stdout-45.log',
    'cmsRun-stdout-46.log',
    'cmsRun-stdout-52.log',
    'cmsRun-stdout-54.log',
    'cmsRun-stdout-8.log',
    'cmsRun-stdout-71.log',
    'cmsRun-stdout-57.log',
    'cmsRun-stdout-58.log',
    'cmsRun-stdout-18.log',
    'cmsRun-stdout-67.log',
    'cmsRun-stdout-33.log',
    'cmsRun-stdout-16.log',
    'cmsRun-stdout-32.log',
    'cmsRun-stdout-49.log',
    'cmsRun-stdout-41.log',
    'cmsRun-stdout-35.log',
    'cmsRun-stdout-50.log',
    'cmsRun-stdout-44.log',
    'cmsRun-stdout-7.log',
    'cmsRun-stdout-43.log',
    'cmsRun-stdout-19.log',
    'cmsRun-stdout-26.log',
    'cmsRun-stdout-5.log',
    'cmsRun-stdout-42.log',
    'cmsRun-stdout-22.log',
    'cmsRun-stdout-53.log',
    'cmsRun-stdout-37.log',
    'cmsRun-stdout-23.log',
    'cmsRun-stdout-64.log',
    'cmsRun-stdout-15.log',
    'cmsRun-stdout-14.log',
    'cmsRun-stdout-9.log',
    'cmsRun-stdout-20.log',
    'cmsRun-stdout-25.log',
    'cmsRun-stdout-13.log',
    'cmsRun-stdout-11.log',
    'cmsRun-stdout-63.log',
    'cmsRun-stdout-29.log',
    'cmsRun-stdout-39.log',
    'cmsRun-stdout-31.log',
    'cmsRun-stdout-38.log',
    'cmsRun-stdout-60.log'
]

filesToFind = [
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/021C3956-CCCC-2A45-83DA-DFDAF5DC81B6.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/0C84F06C-CF33-5249-A382-996E36D53B97.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/1721AEC6-0906-BD45-A78C-67319CA38FA6.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/184A146D-100F-1D4F-AFF7-8D570599735A.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/459461DA-6E42-6741-A6FD-93E24FD8E905.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/460836E4-FEFD-0C49-A9D8-9473E99110C6.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/4B5D121D-3A6A-834C-AC77-90E6129CE743.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/5B283F5F-79CC-5648-B32F-8ED1B0AA60AC.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/708489B2-CAED-9C46-876E-D40F9A9E7775.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/91C63837-7D99-C640-BC59-AD30A3A9B62B.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/9283FD05-CCA6-AD44-86DA-002CF83B2967.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/A0671090-6B3D-DE4D-93F6-AE2B8DFFFA1A.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/A4BF261C-D6C8-7D45-AD1C-E939CC581EC7.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/BC873B97-05EE-D747-9364-70E577B1120A.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/C507C706-EEB1-EF45-BA01-72869C84F0AC.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/E4D66FAA-EE18-5148-94DB-EC324C185E99.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/E515E8D5-D23B-424D-9F65-2322B27176C8.root',
    '/store/data/Run2018B/EGamma/NANOAOD/UL2018_MiniAODv2_NanoAODv9-v1/280000/F8D9B751-AB28-5048-B62C-75767A5797D2.root'
]

for file_path in logFiles:
    with open(file_path, 'r') as file:
        content = file.read()
        for stringtofind in filesToFind:
            if stringtofind in content:
                print("{} corresponds to: \n {}".format(file_path, stringtofind))
                break